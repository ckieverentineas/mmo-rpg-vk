import { PrismaClient } from "@prisma/client";
import { Keyboard } from "vk-io";

const prisma = new PrismaClient()

export async function Tutorial_Welcome(context: any) {
    //–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
		const counter_players = await prisma.user.count()
		await context.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é –ú–∞—Å—Ç–µ—Ä–æ–≤ –†—É–Ω.
							–°–µ–π—á–∞—Å –µ–µ –Ω–∞—Å–µ–ª—è–µ—Ç: ${counter_players} –∏–≥—Ä–æ–∫–æ–≤.
							–°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–µ–π –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –º–∏—Ä: 0 NPC.
							–í —ç—Ç–æ—Ç —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –≤—ã –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.`
		);
		
		const begin = await context.question(`–¢–∞–≤–µ—Ä–Ω–∞. –ü–æ–ª. –í–∞—à–∞ –¥—É—à–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Å–≤–æ–µ –±–µ–∑–¥—ã—Ö–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–Ω–æ–π —Å—Ö–≤–∞—Ç–∫–∏ —Å –∫–∞–∫–∏–º–∏-—Ç–æ —á—É–¥–∞–∫–∞–º–∏.
											–í–Ω–µ–∑–∞–ø–Ω–æ –≤ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–∫—Ä–æ–º–∞–Ω—Ç –∫–∞—Å—Ç—É–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ.
											–í–∞—Å –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–ª–æ –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –ø–ª–∞—â–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç,
											- –¢—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?`,
											{
												keyboard: Keyboard.builder()
												.textButton({
													label: '–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω—é.',
													payload: {
														command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
													},
													color: 'secondary'
												})
												.row()
												.textButton({
													label: '–ê —Ç—ã –∫—Ç–æ?',
													payload: {
														command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
													},
													color: 'secondary'
												}).oneTime()
											}
		)

		
		context.send(`–û —Å–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∏ –æ —Ç–µ–±–µ —Ç–æ–∂–µ –Ω–æ –ø–æ–∑–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ —É–≤–∏–¥–∏–º—Å—è,
		–ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å –º–Ω–µ –≤–æ —Å–Ω–∞—Ö —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—å—è—Å–Ω—è—Ç—å!
		–ü–æ–∑–∂–µ –≤—Å–µ —É–∑–Ω–∞–µ—à—å —É –ø—Ä–æ—Ö–æ–∂–∏—Ö, –∞ —Å–µ–π—á–∞—Å –¥–∞–≤–∞–π–∫–∞ –≤—ã–±–∏—Ä–∞–π —Å–µ–±–µ –æ—Ä—É–∂–∏–µ, —á—Ç–æ –¥–∞—Å—Ç —Ç–µ —Å–∫–∏–ª–ª:`)
}

export async function Tutorial_License(context: any) {
    //—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
		const answer = await context.question(
			'–°–æ–≥–ª–∞—Å–Ω—ã-–ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',
			{
				keyboard: Keyboard.builder()
				.textButton({
					label: '–¥–∞',
					payload: {
						command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
					},
					color: 'positive'
				})
				.row()
				.textButton({
					label: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
					payload: {
						command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
					},
					color: 'negative'
				}).oneTime()
			}
		);
		
		if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ/i.test(answer.text|| '{}')) {
			await context.send('–¢–æ–≥–¥–∞, –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
			return false;
		}
}
export async function Tutorial_Weapon(context: any) {
    await context.send(`–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
					‚öî - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω, –Ω–∞–Ω–æ—Å—è—â–∏–π—Å—è –ø–æ —Ü–µ–ª–∏;
					üîß - –ø—Ä–æ—á–Ω–æ—Å—Ç—å –æ—Ä—É–∂–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤, —á—Ç–æ –≤—ã–¥–µ—Ä–∂–∏—Ç –æ—Ä—É–∂–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç—Ä–µ—Å–Ω–µ—Ç.`
		)
}

export async function Tutorial_Armor(context: any) {
    await context.send(`–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
						üõ° - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–≥–ª–æ—â–∞–µ–º—ã–π —É—Ä–æ–Ω –≤–∞—à–µ–π –±—Ä–æ–Ω–µ–π;
						üîß - –ø—Ä–æ—á–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤, —á—Ç–æ –≤—ã–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∞ –±—Ä–æ–Ω—è, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç—Ä–µ—Å–Ω–µ—Ç.`
		)
}
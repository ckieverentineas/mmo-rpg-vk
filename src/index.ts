import { VK, Keyboard, IMessageContextSendOptions, ContextDefaultState, MessageContext } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import { PrismaClient } from '@prisma/client'
import {
    QuestionManager,
    IQuestionMessageContext
} from 'vk-io-question';
import { randomInt } from 'crypto';
import { timeStamp } from 'console';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { send } from 'process';

//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const vk = new VK({
	token: "b603c7efd00e1ce663d70a18c8915686bbdfee594a2f8d66d77620c712df5e9c2ae9e211c4164b80df6f9",
	pollingGroupId: 207638246
	//token: 'd0d096ed5933ced08bc674c08134e4e47603a0443f4972d6595024ae32f8677b62032ec53ebfddc80ff16'
});

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();
const prisma = new PrismaClient()

/*prisma.$use(async (params, next) => {
	console.log('This is middleware!')
	// Modify or interrogate params here
	console.log(params)
	return next(params)
})*/

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
vk.updates.use(questionManager.middleware);
vk.updates.on('message_new', hearManager.middleware);

//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
InitGameRoutes(hearManager)
registerUserRoutes(hearManager)


//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context, next) => {
	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
	const user_check = await prisma.user.findFirst({
		where: {
			idvk: context.senderId
		}
	})
	//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	if (!user_check) {
		//—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
		const answer = await context.question(
			'–°–æ–≥–ª–∞—Å–Ω—ã-–ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',
			{
				keyboard: Keyboard.builder()
				.textButton({
					label: '–¥–∞',
					payload: {
						command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
					},
					color: 'positive'
				})
				.row()
				.textButton({
					label: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
					payload: {
						command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
					},
					color: 'negative'
				}).oneTime()
			}
		);
		
		if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ/i.test(answer.text|| '{}')) {
			await context.send('–¢–æ–≥–¥–∞, –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
			return;
		}
		//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user_config_get = await prisma.userConfig.findFirst({})
		const user_create = await prisma.user.create({
			data: {
				idvk: context.senderId,
				gold: randomInt(user_config_get?.gold_min||5, user_config_get?.gold_max||10),
				hp: randomInt(user_config_get?.hp_min||5, user_config_get?.hp_max||10),
				id_user_type: 1
			}
		})
		console.log(`Created account for user ${user_create.idvk}`)
		//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
		const counter_players = await prisma.user.count()
		await context.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤—Å–µ–ª–µ–Ω–Ω—É—é –ú–∞—Å—Ç–µ—Ä–æ–≤ –†—É–Ω.
							–°–µ–π—á–∞—Å –µ–µ –Ω–∞—Å–µ–ª—è–µ—Ç: ${counter_players} –∏–≥—Ä–æ–∫–æ–≤.
							–°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–µ–π –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –º–∏—Ä: 0 NPC.
							–í —ç—Ç–æ—Ç —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –≤—ã –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.`
		);
		
		const begin = await context.question(`–¢–∞–≤–µ—Ä–Ω–∞. –ü–æ–ª. –í–∞—à–∞ –¥—É—à–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Å–≤–æ–µ –±–µ–∑–¥—ã—Ö–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–Ω–æ–π —Å—Ö–≤–∞—Ç–∫–∏ —Å –∫–∞–∫–∏–º–∏-—Ç–æ —á—É–¥–∞–∫–∞–º–∏.
											–í–Ω–µ–∑–∞–ø–Ω–æ –≤ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–∫—Ä–æ–º–∞–Ω—Ç –∫–∞—Å—Ç—É–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ.
											–í–∞—Å –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–ª–æ –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –ø–ª–∞—â–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç,
											- –¢—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?`,
											{
												keyboard: Keyboard.builder()
												.textButton({
													label: '–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω—é.',
													payload: {
														command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
													},
													color: 'secondary'
												})
												.row()
												.textButton({
													label: '–ê —Ç—ã –∫—Ç–æ?',
													payload: {
														command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
													},
													color: 'secondary'
												}).oneTime()
											}
		)

		const weapon_type = await prisma.skillConfig.findMany({
			where: {
				id_skill_category: 1
			}
		})
		const keyboard = Keyboard.builder()
		await weapon_type.forEach(element => {
			keyboard.textButton({
					label: element.label,
					payload: {
						command: element.id
					},
					color: 'primary'
			}).row()
		});

		let weapon_list = ''
		await weapon_type.forEach(element => {
			weapon_list += `- ${element.description} \n`
		});

		const skill = await context.question(`–û —Å–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∏ –æ —Ç–µ–±–µ —Ç–æ–∂–µ –Ω–æ –ø–æ–∑–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ —É–≤–∏–¥–∏–º—Å—è,
											–ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å –º–Ω–µ –≤–æ —Å–Ω–∞—Ö —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—å—è—Å–Ω—è—Ç—å!
											–ü–æ–∑–∂–µ –≤—Å–µ —É–∑–Ω–∞–µ—à—å —É –ø—Ä–æ—Ö–æ–∂–∏—Ö, –∞ —Å–µ–π—á–∞—Å –¥–∞–≤–∞–π–∫–∞ –≤—ã–±–∏—Ä–∞–π —Å–µ–±–µ –æ—Ä—É–∂–∏–µ, —á—Ç–æ –¥–∞—Å—Ç —Ç–µ —Å–∫–∏–ª–ª:
											${weapon_list}
											–î–µ—Ä–∂–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Å –≤—Ä–∞–≥–æ–º, –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –Ω–µ –æ—Ç–¥–∞–ª—è–π—Å—è.`,
											{
												keyboard: keyboard
											}
		)

		console.log(skill)
		const weapon_config_get = await prisma.weaponConfig.findFirst({
			where: {
				id_skill_config: skill.payload.command
			}
		})
		const user_get = await prisma.user.findFirst({
			where: {
				idvk: context.senderId
			}
		})

		const skill_create = await prisma.skill.create({
			data: {
				id_user: user_get?.id,
				id_skill_config: skill.payload.command,
				lvl: 0,
				xp: 0
			}
		})
		context.send(`üè¥‚Äç‚ò†–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å–∫–∏–ª–ª: ${skill.text}`)
		const weapon_create = await prisma.weapon.create({
			data:{
				id_user: user_get?.id,
				id_skill_config: skill.payload.command,
				id_damage_type: 1,
				lvl: randomInt(weapon_config_get?.lvl_req_min || 0, weapon_config_get?.lvl_req_max || 5),
				atk_min: randomInt(weapon_config_get?.atk_min || 0, weapon_config_get?.lvl_req_max || 5),
				atk_max: randomInt(weapon_config_get?.atk_min || 0, weapon_config_get?.atk_max || 5),
				hp: randomInt(weapon_config_get?.hp_min || 0, weapon_config_get?.hp_max || 5),
				name: skill.text
			}
		})
		await context.send(`–ü–æ–ª—É—á–µ–Ω–æ –æ—Ä—É–∂–∏–µ: ${weapon_create.name}
					‚öî${weapon_create.atk_min}-${weapon_create.atk_max} üîß${weapon_create.hp}`)
		await context.send(`–ó–∞–ø–æ–º–Ω–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫:
					‚öî - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω, –Ω–∞–Ω–æ—Å—è—â–∏–π—Å—è –ø–æ —Ü–µ–ª–∏;
					üîß - –ø—Ä–æ—á–Ω–æ—Å—Ç—å –æ—Ä—É–∂–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞—Ä–æ–≤, —á—Ç–æ –≤—ã–¥–µ—Ä–∂–∏—Ç –æ—Ä—É–∂–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç—Ä–µ—Å–Ω–µ—Ç.`,
					{
						keyboard: Keyboard.builder()
						.textButton({
							label: '–í–æ–π—Ç–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥',
							payload: {
								command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è'
							},
							color: 'secondary'
						})
						.row()
						.textButton({
							label: '–ü–æ–π—Ç–∏ –Ω–∞—Ñ–∏–≥',
							payload: {
								command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è'
							},
							color: 'secondary'
						})
					}
		)
	}
	return next();
})

vk.updates.startPolling().catch(console.error);